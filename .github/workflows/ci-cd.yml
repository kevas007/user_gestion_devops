name: CI/CD Gestion Users

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Create .env file
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        run: |
          cd backend
          cat > .env << EOL
          MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
          MYSQL_DATABASE=${MYSQL_DATABASE}
          MYSQL_USER=${MYSQL_USER}
          MYSQL_PASSWORD=${MYSQL_PASSWORD}
          MYSQL_HOST=localhost
          MYSQL_PORT=3306
          API_PORT=3000
          EOL

      - name: Setup MySQL
        run: |
          sudo systemctl start mysql
          source backend/.env
          mysql -e "CREATE DATABASE IF NOT EXISTS ${MYSQL_DATABASE};" -uroot -proot
          mysql -e "CREATE USER IF NOT EXISTS '${MYSQL_USER}'@'localhost' IDENTIFIED BY '${MYSQL_PASSWORD}';" -uroot -proot
          mysql -e "GRANT ALL PRIVILEGES ON ${MYSQL_DATABASE}.* TO '${MYSQL_USER}'@'localhost';" -uroot -proot
          mysql -e "FLUSH PRIVILEGES;" -uroot -proot
          mysql -e "ALTER USER 'root'@'localhost' IDENTIFIED BY '${MYSQL_ROOT_PASSWORD}';" -uroot -proot

      - name: Install deps
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Migrations & Tests
        run: |
          cd backend
          source .env
          export SQLALCHEMY_DATABASE_URI="mysql+pymysql://${MYSQL_USER}:${MYSQL_PASSWORD}@${MYSQL_HOST}:${MYSQL_PORT}/${MYSQL_DATABASE}"
          flask db upgrade
          pytest --junitxml=reports/backend-results.xml

      - name: Upload backend report
        uses: actions/upload-artifact@v2.3.1
        with:
          name: backend-tests-report
          path: backend/reports/backend-results.xml

  test-frontend:
    runs-on: ubuntu-latest
    needs: test-backend
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Create Frontend .env file
        run: |
          cd frontend
          echo "API_URL=http://localhost:3000" > .env
          echo "NODE_ENV=test" >> .env

      - name: Install & Test Frontend
        run: |
          cd frontend
          npm ci
          npm test -- --ci --reporters=jest-junit

      - name: Upload frontend report
        uses: actions/upload-artifact@v2.3.1
        with:
          name: frontend-tests-report
          path: frontend/junit.xml

  build-and-push:
    runs-on: ubuntu-latest
    needs: [ test-backend, test-frontend ]
    steps:
      - uses: actions/checkout@v3

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push Backend
        run: |
          docker build -t ghcr.io/${{ github.repository_owner }}/gestion-users-backend:${{ github.sha }} ./backend
          docker push ghcr.io/${{ github.repository_owner }}/gestion-users-backend:${{ github.sha }}

      - name: Build & Push Frontend
        run: |
          docker build -t ghcr.io/${{ github.repository_owner }}/gestion-users-frontend:${{ github.sha }} ./frontend
          docker push ghcr.io/${{ github.repository_owner }}/gestion-users-frontend:${{ github.sha }}